name: Build and Release ArmoredAssault

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        java: [17]
        include:
          - os: ubuntu-latest
            platform_name: linux
          - os: windows-latest
            platform_name: windows
          - os: macos-latest
            platform_name: mac

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Liberica JDK ${{ matrix.java }} with JavaFX
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          distribution: 'liberica'
          java-package: 'jdk+fx'
          cache: maven

      - name: Ensure resources directories exist
        run: |
          mkdir -p src/main/resources/images/logo
        shell: bash

      - name: Prepare Platform-specific Icons
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ] && [ ! -f "src/main/resources/images/logo/tank_logo.ico" ]; then
            # Create placeholder icon if not exists
            echo "Creating placeholder Windows icon"
            touch src/main/resources/images/logo/tank_logo.ico
          elif [ "${{ matrix.os }}" = "macos-latest" ] && [ ! -f "src/main/resources/images/logo/tank_logo.icns" ]; then
            echo "Creating placeholder macOS icon"
            touch src/main/resources/images/logo/tank_logo.icns
          elif [ "${{ matrix.os }}" = "ubuntu-latest" ] && [ ! -f "src/main/resources/images/logo/tank_logo.png" ]; then
            echo "Creating placeholder Linux icon" 
            touch src/main/resources/images/logo/tank_logo.png
          fi
        shell: bash

      - name: Build with Maven
        run: |
          mvn clean package -Dmaven.jlink.skip=true
          mvn dependency:copy-dependencies
        shell: bash
        
      - name: Prepare app files for packaging
        run: |
          mkdir -p installer/input
          cp target/ArmoredAssault-1.0-SNAPSHOT.jar installer/input/
          mkdir -p installer/input/libs
          cp -r target/dependency/* installer/input/libs/
        shell: bash

      # Windows Installer
      - name: Setup WiX for Windows Installer
        if: matrix.os == 'windows-latest'
        run: |
          curl -L -o wix311-binaries.zip https://github.com/wixtoolset/wix3/releases/download/wix3112rtm/wix311-binaries.zip
          Expand-Archive wix311-binaries.zip -DestinationPath wix311
          echo "$env:GITHUB_WORKSPACE\wix311" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: pwsh

      - name: Create Windows Installer
        if: matrix.os == 'windows-latest'
        run: |
          mkdir -p release
          
          # 创建完整的批处理文件启动器
          echo '@echo off
          cd /d "%~dp0"
          set JAVA_OPTS=--add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.desktop/sun.awt=ALL-UNNAMED --add-opens=java.desktop/sun.java2d=ALL-UNNAMED
          java %JAVA_OPTS% --module-path ".\libs" --add-modules javafx.controls,javafx.fxml,javafx.media,javafx.graphics,javafx.base -jar ArmoredAssault-1.0-SNAPSHOT.jar
          if errorlevel 1 pause
          ' > installer/input/ArmoredAssault.bat
          
          # 创建info.properties文件避免部分配置问题
          echo 'app.name=ArmoredAssault
          app.version=1.1.0
          app.vendor=NAU-YYF
          ' > installer/input/info.properties
          
          # 使用简化配置创建EXE而不是MSI
          jpackage --input installer/input \
            --name "ArmoredAssault" \
            --main-jar ArmoredAssault-1.0-SNAPSHOT.jar \
            --main-class com.nau_yyf.ArmoredAssaultApplication \
            --type exe \
            --win-console \
            --win-shortcut \
            --win-menu \
            --win-per-user-install \
            --icon src/main/resources/images/logo/tank_logo.ico \
            --app-version 1.1.0 \
            --vendor "NAU-YYF" \
            --dest release
            
          cp release/*.exe release/ArmoredAssault-Windows-Installer.exe
        shell: bash

      # 为使用ZIP的用户提供更可靠的启动脚本
      - name: Prepare Windows ZIP with improved launcher
        if: matrix.os == 'windows-latest'
        run: |
          # 确保目录存在
          mkdir -p release/ArmoredAssault-windows
          
          # 创建更可靠的启动脚本
          echo '@echo off
          cd /d "%~dp0"
          
          REM 检查Java是否安装
          where java >nul 2>nul
          if %ERRORLEVEL% NEQ 0 (
            echo Java未安装！请安装Java 17或更高版本...
            echo 访问 https://adoptium.net/ 下载Java
            pause
            exit /b 1
          )
          
          REM 设置Java选项
          set JAVA_OPTS=--add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.desktop/sun.awt=ALL-UNNAMED --add-opens=java.desktop/sun.java2d=ALL-UNNAMED
          
          REM 启动应用
          echo 正在启动ArmoredAssault...
          java %JAVA_OPTS% --module-path libs --add-modules javafx.controls,javafx.fxml,javafx.media,javafx.graphics,javafx.base -jar ArmoredAssault-1.0-SNAPSHOT.jar
          
          if %ERRORLEVEL% NEQ 0 (
            echo 程序异常退出，错误代码: %ERRORLEVEL%
            pause
          )
          ' > release/ArmoredAssault-windows/ArmoredAssault.bat
          
          # 创建自动修复脚本
          echo '@echo off
          echo 正在修复ArmoredAssault环境...
          
          REM 检查Java是否安装
          where java >nul 2>nul
          if %ERRORLEVEL% NEQ 0 (
            echo Java未安装！请安装Java 17或更高版本...
            echo 访问 https://adoptium.net/ 下载Java
            pause
            exit /b 1
          )
          
          echo 环境检查完成，可以正常启动游戏了！
          pause
          ' > release/ArmoredAssault-windows/修复环境.bat
          
          # 创建便捷的README
          echo '# ArmoredAssault 使用说明
          
          ## 启动方法
          双击 ArmoredAssault.bat 启动游戏
          
          ## 常见问题
          1. 如果启动失败，请先运行"修复环境.bat"
          2. 确保已安装Java 17或更高版本
          
          ## 联系方式
          如有问题请联系开发者
          ' > release/ArmoredAssault-windows/README.txt
          
          # 重新打包
          powershell Compress-Archive -Force -Path release/ArmoredAssault-windows -DestinationPath release/ArmoredAssault-windows.zip
        shell: bash

      # macOS Installer
      - name: Create macOS App Bundle and DMG
        if: matrix.os == 'macos-latest'
        run: |
          mkdir -p release
          
          # Create sh file launcher
          echo '#!/bin/bash
          java --module-path ./libs -jar ArmoredAssault-1.0-SNAPSHOT.jar' > installer/input/ArmoredAssault.sh
          chmod +x installer/input/ArmoredAssault.sh
          
          # Use jpackage to create DMG
          jpackage --input installer/input \
            --name "ArmoredAssault" \
            --main-jar ArmoredAssault-1.0-SNAPSHOT.jar \
            --main-class com.nau_yyf.ArmoredAssaultApplication \
            --type dmg \
            --icon src/main/resources/images/logo/tank_logo.icns \
            --app-version 1.1.0 \
            --vendor "NAU-YYF" \
            --mac-package-name "ArmoredAssault" \
            --dest release
            
          cp release/*.dmg release/ArmoredAssault-macOS.dmg
        shell: bash

      # Linux Installer
      - name: Create Linux DEB Package
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y fakeroot libgdk-pixbuf2.0-dev libgtk-3-dev
          
          mkdir -p release
          
          # Create shell launcher
          echo '#!/bin/bash
          java --module-path /opt/armoredassault/libs -jar /opt/armoredassault/ArmoredAssault-1.0-SNAPSHOT.jar "$@"' > installer/input/armoredassault
          chmod +x installer/input/armoredassault
          
          # Use jpackage to create DEB
          jpackage --input installer/input \
            --name "armoredassault" \
            --main-jar ArmoredAssault-1.0-SNAPSHOT.jar \
            --main-class com.nau_yyf.ArmoredAssaultApplication \
            --type deb \
            --linux-shortcut \
            --linux-app-category "Game" \
            --app-version 1.0.0 \
            --vendor "NAU-YYF" \
            --icon src/main/resources/images/logo/tank_logo.png \
            --linux-package-deps "libasound2, libatk-bridge2.0-0, libatk1.0-0, libatspi2.0-0, libglib2.0-0, libgtk-3-0, libpng16-16" \
            --dest release
            
          cp release/*.deb release/ArmoredAssault-Linux.deb
        shell: bash

      # Create simple ZIP distributions for all platforms
      - name: Create Platform-specific Package
        run: |
          mkdir -p release/ArmoredAssault-${{ matrix.platform_name }}
          cp target/ArmoredAssault-1.0-SNAPSHOT.jar release/ArmoredAssault-${{ matrix.platform_name }}/
          mkdir -p release/ArmoredAssault-${{ matrix.platform_name }}/libs
          cp -r target/dependency/* release/ArmoredAssault-${{ matrix.platform_name }}/libs/
          
          # Create launcher script
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            echo '@echo off
            cd /d "%~dp0"
            java --add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.desktop/sun.awt=ALL-UNNAMED --add-opens=java.desktop/sun.java2d=ALL-UNNAMED --module-path libs --add-modules javafx.controls,javafx.fxml,javafx.media,javafx.graphics,javafx.base -jar ArmoredAssault-1.0-SNAPSHOT.jar
            pause' > release/ArmoredAssault-${{ matrix.platform_name }}/ArmoredAssault.bat
          else
            echo '#!/bin/bash
            java --add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.desktop/sun.awt=ALL-UNNAMED --add-opens java.desktop/sun.java2d=ALL-UNNAMED --module-path ./libs --add-modules javafx.controls,javafx.fxml,javafx.media,javafx.graphics,javafx.base -jar ArmoredAssault-1.0-SNAPSHOT.jar' > release/ArmoredAssault-${{ matrix.platform_name }}/ArmoredAssault.sh
            chmod +x release/ArmoredAssault-${{ matrix.platform_name }}/ArmoredAssault.sh
          fi
          
          # Create ZIP archive
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            powershell Compress-Archive -Force -Path release/ArmoredAssault-${{ matrix.platform_name }} -DestinationPath release/ArmoredAssault-${{ matrix.platform_name }}.zip
          else
            (cd release && zip -r ArmoredAssault-${{ matrix.platform_name }}.zip ArmoredAssault-${{ matrix.platform_name }})
          fi
        shell: bash

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ArmoredAssault-${{ matrix.platform_name }}-installers
          path: |
            release/*.zip
            release/*.exe
            release/*.msi
            release/*.dmg
            release/*.deb
            release/*.rpm

  release:
    name: Create Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List Downloaded Artifacts
        run: ls -R artifacts/

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/ArmoredAssault-windows-installers/*.zip
            artifacts/ArmoredAssault-windows-installers/*.msi
            artifacts/ArmoredAssault-mac-installers/*.zip
            artifacts/ArmoredAssault-mac-installers/*.dmg
            artifacts/ArmoredAssault-linux-installers/*.zip
            artifacts/ArmoredAssault-linux-installers/*.deb
          draft: false
          prerelease: false
          name: ArmoredAssault ${{ github.ref_name }}
          body: |
            ## ArmoredAssault Release ${{ github.ref_name }}